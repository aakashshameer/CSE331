## CSE 331 hw-graph Part 2 Questions

NOTE: This file is used as part of hw-graph-part2, and is not due as part of the hw-graph-part1
submission. You may leave it blank for hw-graph-part1.

## Section 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of edges, whether there is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

Collection of edges: For the collection of edges, the advantages that come with it is the constant time complexity, 0(1), when adding a new edge.

An adjacency list: For this representation of a Graph, we can get constant time complexity, 0(1), when adding a node and also when adding an edge.

An adjancency matrix: For this representation of a graph, we will get constant time complexity, 0(1), when doing most operations with the Graph.
This includes adding edges, removing edges and checking if an edge exist, all in constant time.




2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I choose to use a Set to represent the outgoing edges and a HashMap to represent the nodes of our directed graph. This map
maps each node to its Set of outgoing edges. In other words, the HashMap with the keys being the Parent Node and the values
being a set of outgoing edges from that node. I also added a private class called 'Edge' in my DirectedGraph class to
implement the outgoing edges accordingly.




## Section 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

From my part-1 test, I added a method called numberOfEdges which counts the numberOfEdges from one node to another. Thus,
I added test in j-unit for these methods to calculate the numberOfEdges at specific points of my graph to ensure that everything was working.




2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.
No but I added an Edge class to implement the outgoing edges properly. Other than that, as I mentioned I added a method called
numberOfEdges. But in terms of my specification, it has stayed the same.



