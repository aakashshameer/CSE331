## CSE 331 hw-graph Part 1 Questions

## Section 1
###########################################################################

1. Write an AF and RI for IntQueue1 and IntQueue2.

    ### IntQueue1

    Abstraction Function:
        IntQueue1 represents a queue of integers as a linked list such that:
        queue = [] = entries (if there are no element in entries)
        queue = [i_1, i_2,... , i_k] = entries (otherwise)
            where k is the number of element in entries.


    Representation Invariant:
        entries != null

        In other words,
        entries always point to some Integer and it has no nulls.



    ### IntQueue2

    Abstraction Function:
        IntQueue2 represents a queue of integers as a linked list such that:
        entries = [k_1, k_2, ..., k_n], front = i, size = n
        queue = [] if size = 0
        queue = [k_(i+1), k_(i+2), ......, k_(i+n)] if front + size <= entries.length
        queue = [k_(i+1), k_(k), k_(1), ......, k_(k-i)] if front + size > entries.length



    Representation Invariant:
        entries != null
        size >= 0,
        front >= 0,
        front <= entries.length - 1




2. Group the snapshots of IntQueue2's internal state into groups that have the same abstract state.

a = [1,2]
b = [2,3,4]
c = [1,2,3]
d = [1,2]
e = [1,2,3,4]
f = [1,2,3]
g = [1,2]
h = [2,3,4]

From the above queues, we can conclude that:
 a = d = g
 b = h
 c = f

3. For each signature below, state and justify in 1-2 sentences (per part) whether the method or constructor
could possibly expose the representation, given the information available. Explain any assumptions you made.

    a. `public int solveEquations(int x, int y, int z)`
        this method solveEquations() would probably not expose the representation because we are only passing and returning
        primitive data types and not mutable objects.


    b. `public String[] decode(boolean slowly)`
        this method decode() might expose the representation because it is returning a String[] which is a mutable object.


    c. `private Date myBirthday()`
        this method might or might not expose the representation. It is based on the 'Date' object. If it is mutable,
        and the Date object returned is new, then this method could expose the representation.


    d. `public String toString()`
        this method toString() would probably not expose the representation because we are only returning a String,
        which is immutable.


    e. `public Iterator<Integer> elements()`
        this method elements() might expose the representation, because it depends on the Iterator<Integer>. If the
        Iterator<> allow us to iterate and remove the original collection, then it might expose the representation
        because the client might tweak our collection.



    f. `public Deck(List<Card> cards)`
        this constructor might expose the representation because if it does not copy the cards passed in because the
        client is able to change it after.




## Section 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.

addNode() - adds node to the graph if it isn't already present.
removeNode() - removes node from the graph if it is present.
addEdge() - adds an edge from two nodes.
removeEdge() - removes an edge from two nodes.
pointingTo() - returns a Set of nodes that the parent node is pointing to.
containsNode() - determine if the node is in the graph.
containsEdge() - determine if the edge is in the graph.
getNodes() - returns all nodes from the graph.
getSize() - determine the number of nodes in the graph.
isEmpty() - determine whether the graph is empty or not.
edgesFromNodeOutgoing() - returns a set of outgoing edges from the passed node.
edgesToNodeIncoming() - returns a set of incoming edges from the passed node.

I considered writing a class for the edges and nodes but I reckon that if wouldn't be needed as
I could have them as a field and my graph ADT could function accordingly.




## Section 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?

My testing strategy was do test odd and obvious cases. These certain cases where I expected the test to fail
and the output should follow that. My script test basically consisted of checking whether adding the nodes and
edges was done correctly following the specification. My junit test on the other hand was expected to test cases
where I expected an exception to be thrown and where I expected specific outputs such as null, false, true and
specific numbers when I want to test the size.



